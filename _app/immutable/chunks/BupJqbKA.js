import"./DsnmJJEf.js";import"./CQDWUwFX.js";import{aj as m,o as u,p as g,$ as b,ak as k,z as F,a7 as w,a9 as _,ac as v,aa as I,r as f,U as B,q as x,A as E,H as T,M as n,C,D}from"./CYYSE3v0.js";function e(d,c,p=!1,t=!1,h=!1){var r=d,l="";m(()=>{var a=b;if(l===(l=c()??"")){u&&g();return}if(a.nodes_start!==null&&(k(a.nodes_start,a.nodes_end),a.nodes_start=a.nodes_end=null),l!==""){if(u){F.data;for(var s=g(),y=s;s!==null&&(s.nodeType!==w||s.data!=="");)y=s,s=_(s);if(s===null)throw v(),I;f(F,y),r=B(s);return}var i=l+"";p?i=`<svg>${i}</svg>`:t&&(i=`<math>${i}</math>`);var o=x(i);if((p||t)&&(o=E(o)),f(E(o),o.lastChild),p||t)for(;E(o);)r.before(E(o));else r.before(o)}})}const A={title:"Shard. A next-gen shell.",date:"2025-07-23",excerpt:"I created Shard as the new kind of shell I was expecting to find. It combines functional programming to make a next-gen shell that is able to serve as the daily driver for a lot of people."},{title:j,date:N,excerpt:U}=A;var S=T("<p>Shard. The project I am going to be working on (and I expect to end once for all). I designed it first, to make sure the language and the shell didn’t lack any of the capabilities a modern shell needs. I’ll be writing it with Zig, but before begining to actually write it, I need to explain a bit of how the language works.</p> <h2>Functional Programming</h2> <p>Functional Programming is one of things I have always pursued but never acutally achieved. Thinking in functional programming is hard for me, since it requires thinking in a different way than we are teached since we begin programming. But I actually find it very sleek and powerful.</p> <p>Shard is based on Haskell’s syntax, with patters deriving from both Functional and Imperative Programming.</p> <h3>Functions</h3> <p>Here’s a simple add function definition in Shard:</p> <!> <p>It looks a lot like Haskell. I also want to support static typing so that the language is safe to write. Here’s the function with that:</p> <!> <h3>Variables</h3> <p>Pardon me, Haskell, but in Shard, we’re not going to have purity and inmutability. Variables are mutable.</p> <!> <h3>Types</h3> <p>Types in Shard aren’t that compilcated, they are easy to follow and use:</p> <h4>Type Definitions</h4> <p>A Type in Shard, is some name that enclosures some functions and variables:</p> <!> <h4>Data Declarations</h4> <p>Instead, Data types are types that enclosure some tagged data.</p> <!> <p>I plan to bring to the scripting langauge actual capabilities regarding abstraction. Types like this exist in the standard library:</p> <!> <p>What is basically defining is:</p> <ul><li>We have a type <code>array</code> which takes as template a expression (normally a number) like this: <code>array&lt;3&gt;</code></li> <li>Then, we have a <strong>comptime list</strong> as a submission to the initializer</li> <li>And that list gets passed to the inner value</li></ul> <h3>Threads</h3> <p>Fusion has an interesting approach to threads, since threads are named. Imagine this:</p> <ul><li>When we open a shell session, we get a screen like this:</li></ul> <!> <ul><li><p><strong><code>main</code></strong> is the thread we’re at in.</p></li> <li><p>By using some commands like <code>switch</code> or <code>spawn</code></p></li></ul> <hr/> <p>I hope I finish the project. I’ll try to write regularly every one or two weeks, which a devlog. I leave you with a script I made that showcases a bit about the language:</p> <!>",1);function $(d){var c=S(),p=n(C(c),12);e(p,()=>'<pre class="shiki github-dark" style="background-color:#24292e;color:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#E1E4E8">addTwo x y </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> x </span><span style="color:#F97583">+</span><span style="color:#E1E4E8"> y</span></span></code></pre>');var t=n(p,4);e(t,()=>`<pre class="shiki github-dark" style="background-color:#24292e;color:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#E1E4E8">addTwo </span><span style="color:#F97583">:</span><span style="color:#79B8FF"> Int</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">Int</span><span style="color:#F97583"> -></span><span style="color:#79B8FF"> Int</span></span>
<span class="line"><span style="color:#E1E4E8">addTwo x y </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> x </span><span style="color:#F97583">+</span><span style="color:#E1E4E8"> y</span></span></code></pre>`);var h=n(t,6);e(h,()=>`<pre class="shiki github-dark" style="background-color:#24292e;color:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#F97583">let</span><span style="color:#E1E4E8"> a </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> 1</span></span>
<span class="line"><span style="color:#6A737D">-- Or if you are feeling like it</span></span>
<span class="line"><span style="color:#F97583">let</span><span style="color:#E1E4E8"> b </span><span style="color:#F97583">:</span><span style="color:#79B8FF"> Int</span><span style="color:#F97583"> =</span><span style="color:#79B8FF"> 3</span></span></code></pre>`);var r=n(h,10);e(r,()=>`<pre class="shiki github-dark" style="background-color:#24292e;color:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#F97583">type</span><span style="color:#F97583"> Animal</span><span style="color:#F97583"> =</span></span>
<span class="line"><span style="color:#E1E4E8">    name </span><span style="color:#F97583">:</span><span style="color:#F97583"> String</span><span style="color:#F97583"> =</span><span style="color:#9ECBFF"> "Unnamed"</span><span style="color:#6A737D"> -- this is a variable, we can even give a default</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8">    say </span><span style="color:#F97583">:</span><span style="color:#F97583"> Nothing</span><span style="color:#F97583"> -></span><span style="color:#F97583"> String</span></span>
<span class="line"><span style="color:#E1E4E8">    delete </span><span style="color:#F97583">:</span><span style="color:#F97583"> Nothing</span><span style="color:#F97583"> -|</span><span style="color:#6A737D"> -- '-|' meaning that it returns the same that it takes</span></span></code></pre>`);var l=n(r,6);e(l,()=>`<pre class="shiki github-dark" style="background-color:#24292e;color:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#F97583">data</span><span style="color:#F97583"> Token</span><span style="color:#F97583"> =</span></span>
<span class="line"><span style="color:#79B8FF">    Comma</span><span style="color:#F97583"> |</span></span>
<span class="line"><span style="color:#79B8FF">    OpenParenthesis</span><span style="color:#F97583"> |</span></span>
<span class="line"><span style="color:#79B8FF">    CloseParenthesis</span><span style="color:#F97583"> |</span></span>
<span class="line"><span style="color:#79B8FF">    Other</span><span style="color:#E1E4E8">(</span><span style="color:#F97583">String</span><span style="color:#E1E4E8">)</span></span></code></pre>`);var a=n(l,4);e(a,()=>`<pre class="shiki github-dark" style="background-color:#24292e;color:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#F97583">type</span><span style="color:#E1E4E8"> array</span><span style="color:#F97583">&#x3C;&#x26;</span><span style="color:#E1E4E8">num</span><span style="color:#F97583">></span><span style="color:#F97583"> &#x26;</span><span style="color:#E1E4E8">list </span><span style="color:#F97583">=</span></span>
<span class="line"><span style="color:#E1E4E8">    value </span><span style="color:#F97583">:</span><span style="color:#E1E4E8"> (typeof list</span><span style="color:#F97583">.</span><span style="color:#E1E4E8">enclosingType)[num] </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> list</span></span></code></pre>`);var s=n(a,12);e(s,()=>'<pre class="shiki github-dark" style="background-color:#24292e;color:#e1e4e8" tabindex="0"><code><span class="line"><span>~ [main] > _</span></span></code></pre>');var y=n(s,8);e(y,()=>`<pre class="shiki github-dark" style="background-color:#24292e;color:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#F97583">import</span><span style="color:#E1E4E8"> fusion </span><span style="color:#6A737D">-- just for scripting</span></span>
<span class="line"><span style="color:#F97583">import</span><span style="color:#E1E4E8"> thread </span><span style="color:#6A737D">-- also just for scripting. In repl, these will be imported</span></span>
<span class="line"><span style="color:#F97583">import</span><span style="color:#E1E4E8"> signals </span><span style="color:#6A737D">-- again</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583">let</span><span style="color:#E1E4E8"> output_file </span><span style="color:#F97583">=</span><span style="color:#9ECBFF"> "output.txt"</span></span>
<span class="line"><span style="color:#E1E4E8">io</span><span style="color:#F97583">.</span><span style="color:#E1E4E8">clearFile output_file </span><span style="color:#6A737D">-- You can do it with 'try' or with not, but the function is @throws</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8">cleanUp </span><span style="color:#F97583">=</span></span>
<span class="line"><span style="color:#E1E4E8">    print </span><span style="color:#9ECBFF">"Cleaning up..."</span></span>
<span class="line"><span style="color:#E1E4E8">    io</span><span style="color:#F97583">.</span><span style="color:#E1E4E8">remove output_file</span></span>
<span class="line"><span style="color:#E1E4E8">    exit </span><span style="color:#79B8FF">0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8">defer cleanUp </span><span style="color:#6A737D">-- or 'onSignal signal.SIGINT cleanUp'</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8">backgroundTask </span><span style="color:#F97583">=</span></span>
<span class="line"><span style="color:#E1E4E8">    for i </span><span style="color:#F97583">in</span><span style="color:#E1E4E8"> (range </span><span style="color:#79B8FF">1</span><span style="color:#79B8FF"> 5</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">do</span></span>
<span class="line"><span style="color:#E1E4E8">        print </span><span style="color:#9ECBFF">"Background $i"</span><span style="color:#E1E4E8"> to output_file </span><span style="color:#6A737D">-- You can use 'io.write', for demonstrating REPL purpose, here you can have it. 'to' is like a pipe</span></span>
<span class="line"><span style="color:#E1E4E8">        wait </span><span style="color:#79B8FF">1</span></span>
<span class="line"><span style="color:#E1E4E8">    end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8">spawn backgroundTask </span><span style="color:#F97583">:</span><span style="color:#E1E4E8">backgroundThread</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8">while true </span><span style="color:#F97583">do</span></span>
<span class="line"><span style="color:#E1E4E8">    print </span><span style="color:#9ECBFF">"Enter something or enter 'exit'"</span></span>
<span class="line"><span style="color:#F97583">    let</span><span style="color:#E1E4E8"> input </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> getInput</span></span>
<span class="line"><span style="color:#F97583">    if</span><span style="color:#E1E4E8"> input </span><span style="color:#F97583">==</span><span style="color:#9ECBFF"> "exit"</span><span style="color:#F97583"> then</span></span>
<span class="line"><span style="color:#E1E4E8">        print </span><span style="color:#9ECBFF">"Exiting..."</span></span>
<span class="line"><span style="color:#E1E4E8">    end</span></span>
<span class="line"><span style="color:#E1E4E8">    io</span><span style="color:#F97583">.</span><span style="color:#E1E4E8">write output_file, </span><span style="color:#9ECBFF">"You said: $input"</span><span style="color:#6A737D"> -- Commas are optional when calling functions</span></span>
<span class="line"><span style="color:#E1E4E8">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8">print </span><span style="color:#9ECBFF">"Contents of $output_file:"</span></span>
<span class="line"><span style="color:#E1E4E8">read output_file to print </span><span style="color:#6A737D">-- Or just 'read output_file'</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8">cleanUp</span></span></code></pre>`),D(d,c)}export{$ as default,A as metadata};
